{"version":3,"sources":["components/TodoList/TodoList.jsx","api/api.js","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["TodoList","todos","selectedUser","filterOnInput","filterBySelect","valueOnInput","valueOnSelect","className","type","name","placeholder","value","onChange","map","todo","key","id","completed","checked","readOnly","title","onClick","userId","request","url","fetch","then","response","ok","Error","status","statusText","json","result","data","CurrentUser","state","user","this","loadData","prevProps","selectedUserId","props","setState","email","phone","React","Component","App","filteredTodos","event","target","prevState","filter","includes","booleanValue","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.60db5bc6.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './TodoList.scss';\n\nexport const TodoList = ({\n  todos,\n  selectedUser,\n  filterOnInput,\n  filterBySelect,\n  valueOnInput,\n  valueOnSelect,\n}) => (\n  <div className=\"TodoList\">\n    <h2>Todos:</h2>\n\n    <div className=\"TodoList__list-container\">\n      <div className=\"TodoList__filter\">\n        <input\n          className=\"TodoList__input\"\n          type=\"text\"\n          name=\"valueOnInput\"\n          placeholder=\"Title\"\n          value={valueOnInput}\n          onChange={filterOnInput}\n        />\n        <select\n          className=\"TodoList__select\"\n          name=\"valueOnSelect\"\n          value={valueOnSelect}\n          onChange={filterBySelect}\n        >\n          <option\n            value=\"all\"\n          >\n            All\n          </option>\n          <option\n            value=\"not completed\"\n          >\n            Active\n          </option>\n          <option\n            value=\"completed\"\n          >\n            Completed\n          </option>\n        </select>\n      </div>\n      <ul className=\"TodoList__list\">\n        {todos.map(todo => (\n          <li\n            key={todo.id}\n            className={todo.completed\n              ? 'TodoList__item TodoList__item--checked'\n              : 'TodoList__item TodoList__item--unchecked'}\n          >\n            <label>\n              {todo.completed\n                ? <input type=\"checkbox\" checked readOnly />\n                : <input type=\"checkbox\" readOnly />\n              }\n              <p>{todo.title}</p>\n            </label>\n            <button\n              className=\"TodoList__user-button button\"\n              type=\"button\"\n              onClick={() => selectedUser(todo.userId)}\n            >\n              {`User #${todo.userId}`}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  </div>\n);\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    completed: PropTypes.bool,\n    userId: PropTypes.number,\n    title: PropTypes.string,\n  }).isRequired).isRequired,\n  selectedUser: PropTypes.func.isRequired,\n  filterOnInput: PropTypes.func.isRequired,\n  filterBySelect: PropTypes.func.isRequired,\n  valueOnInput: PropTypes.string.isRequired,\n  valueOnSelect: PropTypes.string.isRequired,\n};\n","// eslint-disable-next-line\nconst BASE_URL = `https://mate-api.herokuapp.com`;\n\nconst request = url => fetch(`${BASE_URL}${url}`)\n  .then((response) => {\n    if (!response.ok) {\n      throw new Error(`${response.status} - ${response.statusText}`);\n    }\n\n    return response.json();\n  })\n  .then(result => result.data);\n\nexport const getTodos = () => request('/todos');\nexport const getUser = userId => request(`/users/${userId}`);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './CurrentUser.scss';\nimport { getUser } from '../../api/api';\n\nexport class CurrentUser extends React.Component {\n  state = {\n    user: null,\n  };\n\n  componentDidMount() {\n    this.loadData();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.selectedUserId !== this.props.selectedUserId) {\n      this.loadData();\n    }\n  }\n\n  async loadData() {\n    const user = await getUser(this.props.selectedUserId);\n\n    this.setState({ user });\n  }\n\n  render() {\n    const { user } = this.state;\n    const { selectedUser } = this.props;\n\n    return (\n      <>\n        {user\n          ? (\n            <div className=\"App__content-container\">\n              <div className=\"CurrentUser\">\n                <h2 className=\"CurrentUser__title\">\n                  <span>{`Selected user: ${user.id}`}</span>\n                </h2>\n                <h3 className=\"CurrentUser__name\">{user.name}</h3>\n                <p className=\"CurrentUser__email\">{user.email}</p>\n                <p className=\"CurrentUser__phone\">{user.phone}</p>\n                <button\n                  className=\"CurrentUser__clear button\"\n                  type=\"button\"\n                  onClick={() => selectedUser(0)}\n                >\n                  Clear\n                </button>\n              </div>\n            </div>\n          ) : (<div className=\"CurrentUser__waiting\">Please, wait</div>)\n        }\n      </>\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  selectedUserId: PropTypes.number.isRequired,\n  selectedUser: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser/CurrentUser';\nimport { getTodos } from './api/api';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    filteredTodos: [],\n    selectedUserId: 0,\n    valueOnInput: '',\n    valueOnSelect: 'all',\n  };\n\n  componentDidMount() {\n    getTodos()\n      .then((todos) => {\n        const filteredTodos = todos.filter(todo => (\n          todo.title && todo.id\n        ));\n\n        this.setState({\n          todos: filteredTodos,\n          filteredTodos,\n        });\n      });\n  }\n\n  selectedUser = (selectedUserId) => {\n    this.setState({ selectedUserId });\n  };\n\n  filterOnInput = (event) => {\n    const { value } = event.target;\n\n    this.setState(prevState => ({\n      valueOnInput: value,\n      filteredTodos: prevState.todos.filter(todo => (\n        todo.title.includes(value)\n      )),\n    }));\n  };\n\n  filterBySelect = (event) => {\n    const { value } = event.target;\n\n    if (value === 'all') {\n      this.setState(prevState => ({\n        filteredTodos: prevState.todos,\n        valueOnSelect: value,\n      }));\n    }\n\n    const booleanValue = value === 'completed';\n\n    if (value === 'completed' || value === 'not completed') {\n      this.setState(prevState => ({\n        filteredTodos: prevState.todos.filter(todo => (\n          todo.completed === booleanValue\n        )),\n        valueOnSelect: value,\n      }));\n    }\n  }\n\n  render() {\n    const {\n      filteredTodos,\n      selectedUserId,\n      valueOnInput,\n      valueOnSelect,\n    } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={filteredTodos}\n            selectedUser={this.selectedUser}\n            filterOnInput={this.filterOnInput}\n            filterBySelect={this.filterBySelect}\n            valueOnInput={valueOnInput}\n            valueOnSelect={valueOnSelect}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          {selectedUserId !== 0\n            ? (\n              <CurrentUser\n                selectedUserId={selectedUserId}\n                selectedUser={this.selectedUser}\n              />\n            ) : (\n              <div className=\"App__text\">Please, select a user</div>\n            )}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}